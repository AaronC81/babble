impl String {
    // Slightly wonky test for escape sequences
    InternalTest case: "escapes" that: "\r\n\t\0\"" length equals: 5.

    /// Gets the characters within this string.
    ///
    /// @returns An array of this string's characters.
    func chars {
        result = #{}.
        self length times: [ |i|
            result append: (self charAt: i).
            i = i add: 1.
        ].
        result
    }
    InternalTest case: "chars" that: "hello" chars equals: #{ "h" "e" "l" "l" "o" }.

    /// Whether this string is composed entirely of whitespace.
    ///
    /// This currently only supports ASCII whitespace characters: \r, \n, \t, and space.
    ///
    /// @returns `true` if the string is entirely ASCII whitespace, `false` otherwise.
    func isWhitespace {
        wsChars = #{ "\r" "\n" "\t" " " }.
        self chars all: [ |c| wsChars contains: c ].
    }
    InternalTest case: "isWhitespace pos" that: " \t  \r  " isWhitespace equals: true.
    InternalTest case: "isWhitespace neg" that: " \t h \r  " isWhitespace equals: false.

    /// Returns a copy of this string with whitespace stripped from the beginning and end.
    ///
    /// @returns The new string with whitespace stripped.
    func strip {
        self chars skipWhile: &isWhitespace
                 $ reverse skipWhile: &isWhitespace
                 $ reverse join
    }
    InternalTest case: "strip" that: " \n  abc \r\t  " strip equals: "abc".

    /// Parses this string as a base-10 integer. If the string is not a valid integer, returns `null`.
    ///
    /// @returns An integer, or `null`.
    func toInteger {
        self toInteger: 10
    }
    InternalTest case: "toInteger: valid"   that: ("2a" toInteger: 16) equals: 42.
    InternalTest case: "toInteger: invalid" that: ("2a" toInteger: 10) equals: null.
    InternalTest case: "toInteger" that: ("25" toInteger) equals: 25.

    /// Splits a string using another string as a separator.
    ///
    /// @param split: The separator to split on.
    /// @returns An array of separated strings.
    func split: sep {
        buffer = "".    // Current separated string
        matchIndex = 0. // Expected character in separator
        result = #{}.   // Resulting array of strings

        self chars forEach: [ |c|
            // Does this character correspond to the next character in the separator?
            c equals: (sep charAt: matchIndex) $ ifTrue: [
                // Yes - advance the separator index, and if we've reached the end, push the buffer
                // into the result and reset it
                matchIndex = matchIndex add: 1.
                matchIndex equals: sep length $ ifTrue: [
                    result append: buffer.
                    buffer = "".
                    matchIndex = 0.
                ]
            ] else: [
                // No - if the separator index had advanced, reset it and append the character to
                // the current buffer
                matchIndex equals: 0 $ ifFalse: [
                    buffer = buffer concat: (sep chars take: matchIndex $ join).
                ].
                matchIndex = 0.
                buffer = buffer concat: c.
            ].
        ].

        result append: buffer.
        result
    }
    InternalTest case: "split single-char" that: ("abc,def,gh,xyz,12 3" split: ",") equals: #{ "abc" "def" "gh" "xyz" "12 3" }.
    InternalTest case: "split multi-char" that: ("abc, def, gh,xyz, 12 3, " split: ", ") equals: #{ "abc" "def" "gh,xyz" "12 3" "" }.
}
