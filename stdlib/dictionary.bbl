/// A data structure which maps unique keys to values.
///
/// Objects used as keys must implement `Hashable` and `Equatable`.
///
/// Items in the dictionary are categorised by the `Hashable hash` value of their keys, but also
/// compared for equality with `Equatable equals:`. This means that keys `a` and `b` where
/// `a hash equals: b hash` but `a notEquals: b` will be treated as distinct keys.
struct Dictionary buckets length.
impl Dictionary {
    // TODO: equatable implementation needs to not care about bucket sizes - since deleting items
    // won't make the dictionary smaller (the memory's already allocated, what's the point?)

    /// Creates an empty dictionary.
    ///
    /// @returns An empty dictionary.
    static func new {
        defaultBuckets = 10.
        self buckets: (Array newFrom: [ #{} ] length: defaultBuckets) length: 0
    }

    /// Creates a dictionary from an array of key-value pairs.
    ///
    /// @param fromPairs: An array of two-element arrays, where the first element is the key and the second is the value.
    /// @returns A new dictionary from these values.
    static func fromPairs: pairs {
        d = self new.
        pairs forEach: ![ | #{ k. v } | d set: k value: v ].
        d
    }

    /// Gets the bucket array for the given key. Because buckets are chosen using modular
    /// arithmetic on the hash, this will always return a bucket.
    ///
    /// @param bucketFor: The key to get the bucket for.
    /// @returns The bucket array.
    private func bucketFor: key {
        self buckets get: (key hash modulo: self buckets length)
    }
    
    /// Gets the index of the given key in the given bucket. If the key is not present in the
    /// bucket, returns `null`.
    ///
    /// @param indexFor: The key to get the index for.
    /// @param inBucket: The bucket to search. This **must** be the correct bucket returned by `bucketFor:`.
    /// @returns The index of the key, or `null` if it doesn't exist.
    private unordered func indexFor: key inBucket: bucket {
        x = bucket withIndex find: ![ | #{ i. #{ k. _ } } | k equals: key ].
        x isNull ifTrue: [ return null ].
        x first.
    }

    /// Re-creates the internal data structure of this dictionary, with a number of buckets equal to
    /// double the dictionary's current length.
    static func resizeBuckets {
        oldItems = self toArray.
        self buckets = Array newFrom: [ #{} ] length: (self length * 2).
        self length = 0.
        oldItems forEach: ![ | #{ k. v } | self set: k value: v ].
        null
    }

    /// Iterates over the key-value pairs of this dictionary. Each element is a two-element array,
    /// where the first element is the key and the second is the value.
    ///
    /// @param fn: The block to execute for each key-value pair, which should take one parameter.
    func forEach: fn {
        self buckets forEach: [ |bucket| bucket forEach: fn ]
    }
    use Enumerable.

    /// Sets a key in this dictionary to the given value. If the key already exists, its value is
    /// replaced.
    ///
    /// @param set: The key to insert.
    /// @param value: The value to map to that key.
    func set: key value: value {
        // Is this key already in the dictionary?
        bucket = self bucketFor: key.
        index = self indexFor: key inBucket: bucket.
        index isNull ifTrue: [
            // No - insert new
            bucket append: #{ key. value }.
            self length = self length + 1.

            // If we've hit a usage threshold (length = #buckets), rescale
            self length greaterThanOrEquals: self buckets length $ ifTrue: [ self resizeBuckets ].
        ] else: [
            // Yes - replace existing
            bucket set: index value: #{ key. value }.
        ].
        null
    }

    /// Gets a key from this dictionary.
    ///
    /// @param get: The key to retrieve.
    /// @returns The value mapped to that key, or `null` if the key is not present in the dictionary.
    func get: key {
        bucket = self bucketFor: key.
        index = self indexFor: key inBucket: bucket.

        index isNull ifTrue: [ return null ].
        bucket get: index $ last.
    }

    [
        d = Dictionary new.
        d set: 1 value: 100.
        d set: 2 value: 200.
        d set: 3 value: 300.
        d set: 2 value: 400.
        InternalTest case: "Dictionary get/set"
                     that: ((d get: 1 $ equals: 100) and: (d get: 2 $ equals: 400))
                     equals: true.
    ] call.

    /// Deletes a key from this dictionary.
    ///
    /// @param delete: The key to delete.
    func delete: key {
        bucket = self bucketFor: key.
        index = self indexFor: key inBucket: bucket.

        index isNull ifTrue: [ return null ].
        bucket delete: index.
        self length = self length - 1.

        null
    }
    [
        d = Dictionary new.
        d set: 1 value: 100.
        d set: 2 value: 200.
        d set: 3 value: 300.
        d set: 2 value: 400.
        d delete: 2.
        InternalTest case: "Dictionary delete" that: (d get: 2) equals: null.
    ] call.

    /// Returns an array of the keys in this dictionary.
    ///
    /// @returns This dictionary's keys.
    func keys {
        self map: &first
    }

    /// Returns an array of the values in this dictionary.
    ///
    /// @returns This dictionary's keys.
    func values {
        self map: &last
    }

    /// Checks if this dictionary is empty.
    ///
    /// @returns `true` if this dictionary is empty, or `false` otherwise.
    func isEmpty {
        self length equals: 0
    }

    /// Determines whether this dictionary contains the given key.
    ///
    /// @param containsKey: The key to check for.
    /// @returns `true` if the key is present in this dictionary, `false` otherwise.
    func containsKey: key {
        bucket = self bucketFor: key.
        index = self indexFor: key inBucket: bucket.

        index isNull not
    }

    [
        d = Dictionary new.
        d set: 1 value: 100.
        d set: 2 value: 200.
        d set: 3 value: 300.
        d set: 2 value: 400.
        InternalTest case: "Dictionary keys" that: d keys sort equals: #{ 1 2 3 }.
        InternalTest case: "Dictionary values" that: d values sort equals: #{ 100 300 400 }.
        InternalTest case: "Dictionary containsKey pos" that: (d containsKey: 2) equals: true.
        InternalTest case: "Dictionary containsKey neg" that: (d containsKey: 5) equals: false.
    ] call.

    /// Gets a key from this dictionary, or if it doesn't exist, inserts it with the given value and
    /// returns that.
    ///
    /// @param get: The key to retrive (or insert if it doesn't exist).
    /// @returns The value mapped to that key, or the newly-inserted value.
    func get: key orInsert: value {
        self containsKey: key $ ifFalse: [
            self set: key value: value.
        ].
        self get: key.
    }
    [
        d = Dictionary new.
        d set: 1 value: 100.
        d set: 2 value: 200.
        d set: 3 value: 300.
        d set: 2 value: 400.
        InternalTest case: "Dictionary get:orInsert: existing"
                     that: ((d get: 1 orInsert: 500 $ equals: 100) and: (d get: 1 $ equals: 100))
                     equals: true.
        InternalTest case: "Dictionary get:orInsert: new"
                     that: ((d get: 4 orInsert: 600 $ equals: 600) and: (d get: 4 $ equals: 600))
                     equals: true.
    ] call.

    // Override `Representable repr`
    func repr {
        items = self isEmpty
            ifTrue: [ "(empty)" ]
            else:   [ self map: ![ | #{ k. v } | "({k} => {v})" ] $ join: " " ]
        "Dictionary {items}"
    }
}
