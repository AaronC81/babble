impl Array {
    // Tests for core methods
    InternalTest case: "new" that: Array new equals: #{}.
    InternalTest case: "length" that: #{ 1 2 3 } length equals: 3.
    InternalTest case: "append:" that: [
        x = #{ 1 2 3 }.
        x append: 4.
        x
    ] call equals: #{ 1 2 3 4 }.
    InternalTest case: "set:value:" that: [
        x = #{ 1 2 3 }.
        x set: 1 value: 5.
        x
    ] call equals: #{ 1 5 3 }.

    // Test that arrays aren't treated like value types
    InternalTest case: "array soft copy" that: [
        x = #{ 1 2 3 }.
        y = x.
        y append: 4.
        x
    ] call equals: #{ 1 2 3 4 }.

    /// Constructs a new array by repeating one element.
    ///
    /// @param newOf: The element to repeat.
    /// @param length: The number of times to repeat the element.
    /// @returns A new array.
    static func newOf: item length: length {
        result = #{}.
        length times: [ result append: item. ].
        result
    }
    InternalTest case: "newOf" that: (Array newOf: 4 length: 3) equals: #{ 4 4 4 }.

    /// Checks if this array is empty.
    ///
    /// @returns `true` if this array is empty, or `false` otherwise.
    func isEmpty {
        self length equals: 0
    }
    InternalTest case: "isEmpty pos" that: #{} isEmpty    equals: true.
    InternalTest case: "isEmpty neg" that: #{ 1 } isEmpty equals: false.

    /// Calls a function for each element of the array, passing it as a parameter.
    ///
    /// @param forEach: The block to call, which should accept one parameter.
    func forEach: fn {
        i = 0.
        [ i lessThan: self length ] whileTrue: [
            fn call: (self get: i).
            i = i add: 1.
        ].
        null
    }

    /// Deletes the last item of this array and returns it. If the array is empty, returns `null`.
    ///
    /// @returns The last (now-deleted) item of this array, or `null`.
    func pop {
        self delete: (self length sub: 1)
    }
    [
        x = #{ 1 2 3 }.
        popped = x pop.
        InternalTest case: "popped value" that: popped equals: 3.
        InternalTest case: "popped value" that: x      equals: #{ 1 2 }.
    ] call.

    /// Returns the first item of this array.
    ///
    /// @returns The first item of the array, or `null` if it is empty.
    func first {
        self get: 0
    }
    InternalTest case: "first non-empty" that: #{ 1 2 3 } first equals: 1.
    InternalTest case: "first empty"     that: #{ } first       equals: null.

    /// Returns the last item of this array.
    ///
    /// @returns The last item of the array, or `null` if it is empty.
    func last {
        self get: (self length sub: 1)
    }
    InternalTest case: "last non-empty" that: #{ 1 2 3 } last equals: 3.
    InternalTest case: "last empty"     that: #{ } last       equals: null.

    /// Appends all elements from an enumerable to this array.
    ///
    /// @param appendAll: The enumerable to append items from.
    func appendAll: items {
        items forEach: [ |x|
            self append: x.
        ].
        self
    }

    use Enumerable.
    InternalTest defer: [
        InternalTest case: "toArray" that: #{ 1 2 3 } toArray equals: #{ 1 2 3 }.
        InternalTest case: "reverse" that: #{ 1 2 3 } reverse equals: #{ 3 2 1 }.
        InternalTest case: "map" that: (#{ 1 2 3 } map: [ |x| x add: 1 ]) equals: #{ 2 3 4 }.
        InternalTest case: "filter" that: (#{ 1 2 3 } filter: [ |x| x lessThan: 3 ]) equals: #{ 1 2 }.
        InternalTest case: "find pos" that: (#{ 1 8 3 } find: [ |x| x modulo: 2 $ equals: 0 ]) equals: 8.
        InternalTest case: "find neg" that: (#{ 1 7 3 } find: [ |x| x modulo: 2 $ equals: 0 ]) equals: null.
        InternalTest case: "contains pos" that: (#{ 1 7 3 } contains: 7) equals: true.
        InternalTest case: "contains neg" that: (#{ 1 7 3 } contains: 8) equals: false.

        InternalTest case: "withIndex" that: (#{ 1 7 3 } withIndex) equals: #{ #{ 0 1 } #{ 1 7 } #{ 2 3 } }.
        InternalTest case: "sum" that: #{ 1 7 3 } sum equals: 11.
        InternalTest case: "join many" that: (#{ "foo" "bar" "baz" } join: ", ") equals: "foo, bar, baz".
        InternalTest case: "join one"
                     that: (#{ "foo" } join: ", ")
                     equals: "foo".
        InternalTest case: "join none"
                     that: (#{ } join: ", ")
                     equals: "".
        InternalTest case: "join no-arg" that: #{ "foo" "bar" "baz" } join equals: "foobarbaz".
        
        InternalTest case: "takeWhile" that: (#{ 1 2 3 4 8 1 2 } takeWhile: [ |x| x lessThan: 5 ]) equals: #{ 1 2 3 4 }.
        InternalTest case: "skipWhile" that: (#{ 1 2 3 4 8 1 2 } skipWhile: [ |x| x lessThan: 5 ]) equals: #{ 8 1 2 }.
        InternalTest case: "take" that: (#{ 1 2 3 4 8 1 2 } take: 3) equals: #{ 1 2 3 }.
        InternalTest case: "skip" that: (#{ 1 2 3 4 8 1 2 } skip: 3) equals: #{ 4 8 1 2 }.

        InternalTest case: "chunk" that: (#{ 1 2 3 4 5 6 7 8 } chunk: 3) equals: #{ #{ 1 2 3 } #{ 4 5 6 } #{ 7 8 } }.
        InternalTest case: "chunkExact non-exact" that: (#{ 1 2 3 4 5 6 7 8   } chunkExact: 3) equals: #{ #{ 1 2 3 } #{ 4 5 6 } }.
        InternalTest case: "chunkExact exact" that:     (#{ 1 2 3 4 5 6 7 8 9 } chunkExact: 3) equals: #{ #{ 1 2 3 } #{ 4 5 6 } #{ 7 8 9 } }.

        InternalTest case: "any pos" that: (#{ 1 3 5 4 7 } any: [ |x| x modulo: 2 $ equals: 0 ]) equals: true.
        InternalTest case: "any neg" that: (#{ 1 3 5 9 7 } any: [ |x| x modulo: 2 $ equals: 0 ]) equals: false.

        InternalTest case: "all pos" that: (#{ 1 3 5 9 7 } all: [ |x| x modulo: 2 $ equals: 1 ]) equals: true.
        InternalTest case: "all neg" that: (#{ 1 3 5 4 7 } all: [ |x| x modulo: 2 $ equals: 1 ]) equals: false.

        InternalTest case: "min" that: #{ 6 3 5 2 7 } min equals: 2.
        InternalTest case: "max" that: #{ 3 10 5 2 7 } max equals: 10.

        InternalTest case: "zip" that: (#{ 1 2 3 } zip: #{ 4 5 6 }) equals: #{ #{ 1 4 } #{ 2 5 } #{ 3 6 } }.
        InternalTest case: "partition" that: (#{ 1 2 3 4 5 6 7 8 } partition: [ |x| x modulo: 2 $ equals: 0 ]) equals: #{ #{ 2 4 6 8 } #{ 1 3 5 7 } }.

        InternalTest case: "window ok" that: (#{ 1 2 3 4 5 6 } window: 3) equals: #{ #{ 1 2 3 } #{ 2 3 4 } #{ 3 4 5 } #{ 4 5 6 } }.
        InternalTest case: "window equal" that: (#{ 1 2 3 } window: 3) equals: #{ #{ 1 2 3 } }.
        InternalTest case: "window less" that: (#{ 1 2 } window: 3) equals: #{ }.

        InternalTest case: "sort" that: (#{ 3 1 2 6 4 0 5 } sort) equals: #{ 0 1 2 3 4 5 6 }.
        InternalTest case: "sortBy" that: (#{ "foo" "g" "abcd" "yo" } sortBy: &length) equals: #{ "g" "yo" "foo" "abcd" }.

        InternalTest case: "groupBy"
                     that: (#{ "abc" "bdf" "azy" "bcd" "cad" "bad" } groupBy: [ |x| x charAt: 0 ])
                     equals: (Dictionary mapping: #{
                         #{ "a" #{ "abc" "azy" } }
                         #{ "b" #{ "bdf" "bcd" "bad" } }
                         #{ "c" #{ "cad" } }
                     }).
    ]
}
