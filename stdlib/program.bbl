/// A globally-unique value created exclusively by the `catchTag:` method on `Program`, to ensure
/// that a thrown value will always be caught by one exact known catch block.
///
/// Instances of this struct should **not** be created manually.
struct ThrowTag id static next.
ThrowTag next = 1.
impl ThrowTag {
    static func new {
        result = ThrowTag id: self next.
        self next = self next add: 1.
        result
    }
}

impl Program {
    [
        result = 0.
        Program catchIfTrue: [ |x| x equals: 3 ] in: [
            result = result add: 1.
            Program catchIfTrue: [ |x| x equals: 2 ] in: [
                result = result add: 1.
                Program throw: 3.
                result = result add: 1.
            ].
            result = result add: 1.
        ].
        InternalTest case: "catchIfTrue:in:" that: result equals: 2.
    ] call.

    InternalTest case: "eval" that: (Program eval: "2 add: 2") equals: 4.

    /// Runs the given body block, and exits if an object is thrown in it with `throw:` and
    /// it equals the given object according to `equals:`. If they are not equal, the object is
    /// rethrown.
    ///
    /// @param catchEquals: The value to compare against.
    /// @param in: The block to execute.
    /// @returns The value returned by the block, or the thrown value if the block exits early.
    static func catchEquals: value in: block {
        Program catchIfTrue: [ |x| x equals: value ] in: block
    }
    [
        result = 0.
        Program catchEquals: 3 in: [
            result = result add: 1.
            Program catchEquals: 2 in: [
                result = result add: 1.
                Program throw: 3.
                result = result add: 1.
            ].
            result = result add: 1.
        ].
        InternalTest case: "catchEquals:in:" that: result equals: 2.
    ] call.

    /// Runs the given body block, passing it a unique instance of `ThrowTag`, and exits if the tag
    /// is thrown with `throw:`.
    ///
    /// @param catchTag: The block to execute, accepting one parameter, the tag.
    /// @returns The value returned by the block, or the tag if the block exits early.
    static func catchTag: block {
        tag = ThrowTag new.
        Program catchEquals: tag in: [ block call: tag ].
    }

    /// Run the given block repeatedly.
    ///
    /// @param loop: The block to execute.
    /// @returns This method will never return.
    static func loop: fn {
        [ true ] whileTrue: fn.
    }
}
