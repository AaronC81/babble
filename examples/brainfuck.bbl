struct Tape contents index size.
impl Tape {
    static func new: size {
        Tape contents: (Array newOf: 0 length: size)
             index: 0
             size: size
    }

    func read {
        self contents get: self index
    }
    func write: value {
        self contents set: self index
                      value: value
    }
    
    func next {
        self index = self index + 1.
        self index greaterThanOrEquals: self size $ ifTrue: [
            Program error: "tape out of range".
        ].
    }
    func prev {
        self index = self index - 1.
        self index lessThan: 0 $ ifTrue: [
            Program error: "tape out of range".
        ].
    }
}

struct Interpreter instructions index tape.
impl Interpreter {
    static func new: instructions {
        Interpreter instructions: instructions chars
                    index: 0
                    tape: (Tape new: 1000)
    }

    func step {
        // Exit if the instruction pointer has gone off the end of the tape
        (self index greaterThanOrEquals: self instructions length) ifTrue: [ Program exit. ].

        // Otherwise, execute the current instruction
        ins = self currentInstruction.
        Match value: ins toOneOf: #{
            ?[ |"+"| self tape write: (self tape read + 1) ]
            ?[ |"-"| self tape write: (self tape read - 1) ]
            ?[ |">"| self tape next ]
            ?[ |"<"| self tape prev ]
            ?[ |"["|
                self tape read equals: 0 $ ifTrue: [
                    // Seek the matching ] and jump past it
                    bracketDepth = 1
                    [ bracketDepth greaterThan: 0 ] whileTrue: [
                        self index = self index + 1.
                        self currentInstruction equals: "[" $ ifTrue: [ bracketDepth = bracketDepth + 1 ].
                        self currentInstruction equals: "]" $ ifTrue: [ bracketDepth = bracketDepth - 1 ].
                    ]
                ]
            ]
            ?[ |"]"|
                self tape read notEquals: 0 $ ifTrue: [
                    // Seek the matching [ and jump to it
                    bracketDepth = 1
                    [ bracketDepth greaterThan: 0 ] whileTrue: [
                        self index = self index - 1.
                        self currentInstruction equals: "[" $ ifTrue: [ bracketDepth = bracketDepth - 1 ].
                        self currentInstruction equals: "]" $ ifTrue: [ bracketDepth = bracketDepth + 1 ].
                    ]
                ]
            ]
            ?[ |"."| Console print: (String charFromAsciiCode: self tape read) ]
        }
        // TODO: , command

        // Move onto the next instruction
        self index = self index + 1.
    }

    func currentInstruction {
        self instructions get: self index
    }
}

// Program from: https://esolangs.org/wiki/Brainfuck
helloWorld = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.".
interpreter = Interpreter new: helloWorld.
[ true ] whileTrue: [ interpreter step ].
